#include "Primitives.imp"

Void main()
{
  Int dim:=5;
  Int dim2:=10;
  Int[Int][dim] A := 0;
  Int[Int][dim2] B :=5;
--  Int[Int] B:=newArr(dim2,5);
-- Generates state mutation for arrays. Forbid this!
--  B:=A;
  printArr(A);
  testOK(A,0,dim);
  printArr(A);
  testFailed(A,0,dim2);
  printArr(A)
--  initArr2(A,0,dim);
--  initArr3(A,0,dim);
--  initArr4(A,0,dim);
--  printArr(A);
--  Void
}  


Void testOK(int[int] A,int i,int dim)
{
  {while (i<dim) do {
--    print(A[i]);
    A[i]:=1;
--    print(A[i]);
    i:=i+1
  }}
}

Void testFailed(int[int] A,int i,int dim)
{
  {while (i<dim) do {
    i:=i+1;
--    print(A[i]);
    A[i]:=2
--    print(A[i])
  }}
}

--Void initArr2(int[int] A,int init,int dim)
--{
--  Int i:=init;
--  while (i<dim) do {
--    A[i]:=2;
--    i:=i+1
--  }
--}
--
--Void initArr3(int[int] A,int init,int dim)
--{
--  Int i:=init;
--  for (Void;i<dim;i:=i+1) {
--      A[i]:=3
--  }
--}

--Void initArr4 (Int [Int] A, Int i, Int dim)
--{ 
--  if (i<dim) then {
--    assign(A,i,4);
--    initArr4(A,i+1,dim)
--  } else Void
--} 

