#include "Primitives.imp"

Void main()
{
  Int dim:=4;
  Float [Int][dim] A := 0.0;
  Float res := 0.0;
  init_arrF(A,0,dim-1);
  printArrF(A);
  res := sum(A,1,dim-1);
  printF(res)
}

Void init_arrF(Float[Int] a, Int i, Int j)
{
  if (i>j) then { Void }
  else {
    assignF(a,i,myrandomF(10.0));
    init_arrF(a,i+1,j)
  }
}

--Float sum(Float[Int] a, Int i,Int j)
--{
--  if (i>j) then { 0.0 }
--  else { plusFF((l1:subF(a,i)),(l2:sumRec(a,i+1,j))) }
--}
--
--Float sumRec(Float[Int<a>] a, Int<i> i,Int<j> j)
-- { if (i>j) then { 0.0 }
--   else { plusFF(subF(a,i),sumRec(a,i+1,j)) }
-- }

Float sum (Float[Int<a>] a, Int<i> i,Int<j> j)
where (Bogus),{},{},(a=a^ && j=j^ && 0<=i<i^<=a,j+1 && a>j),
 { if (i>j) then { 0.0 }
   else { plusFF(subF(a,i),sum(a,i+1,j)) }
 }
