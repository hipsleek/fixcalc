#include "Primitives.imp"

-- Example from Figure 1 of Gulwani-PLDI'08
-- In our system, the assertion can be proven, but probably the TransInv is less precise than Gulwani's (x<0 \/ y>0)
void PV1(int y) {
  int x := -50;
  while (x<0) do {
    x:=x+y;
    y:=y+1
  };
  assert(y>0)
}


{-- Example from Figure 2 of Gulwani-PLDI'08
-- In our system, the assertion cannot be proven.
void PV2() {
  int x:=0;
  int y:=0;
  while (y>=0) do {
    if (x<=50) then { y:=y+1 }
    else { y:=y-1 };
    x:=x+1
  };
  assert(x=102)
}
-}

{-- Example from Figure 3b of Gulwani-PLDI'08
-- In our system, the assertion is proven just like in Gulwani's paper.
void IP2() {
  int result := M(19) + M(119);
  assert(result=200)
}

int M(int n) {
  if (n>100) then { n-10 }
  else { M(M(n+11)) }
}
-}

{-- Example from Figure 4a of Gulwani-PLDI'08
-- In our system the precondition that ensures non-termination is inferred (i<=0) but not the one that ensures safety (i>=j).
void WP1(int i, int j) {
  int x:=0;
  int y:=0;
  while (x<=100) do {
    x:=x+i;
    y:=y+j
  };
  assert(x>=y)
}
-}

{- Example from Figure 7b of Gulwani-PLDI'08
-- In our system, the postcondition is very imprecise, compared to Gulwani's (s+d+t>=0 && d<=s+5t)
void SP2(int d, int t, int s){
  if (and(d=0,and(t=0,s=0))) then {
    while (t<100) do {
      if (randBool()) then {
        t:=t+1; s:=0
      } else {
        if (randBool()) then {
          if (s<5) then { d:=d+1;s:=s+1 } else { void }
        } else { void }
      }
    }
  } else { void }
}
-}

{-- Example from Figure 10 of Gulwani-PLDI'08
void Bug1(int y, int n) {
  int x:=0;
  if (y<9) then {
    while (x<n) do {
      assert (x<200);
      x:=x+y
    }
  } else { 
    while (x>=0) do {
      x:=x+1
    }
  }
}
-}

{-- Example from Figure 11b of Gulwani-PLDI'08
-- In our system, the precondition that ensures non-termination is (i>=1), just like Gulwani's method.
void NT2(int i) {
  int even:=0;
  while (i>=0) do {
    if (even = 0) then {
      i:=i-1
    } else {
      i:=i+1
    };
    even := 1-even
  }
}
-}


